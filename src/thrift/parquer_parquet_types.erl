%%
%% Autogenerated by Thrift Compiler (0.21.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(parquer_parquet_types).

-include("parquer_parquet_types.hrl").

-export([
    struct_info/1, struct_info_ext/1, enum_info/1, enum_names/0, struct_names/0, exception_names/0
]).

struct_info('sizeStatistics') ->
    {struct, [
        {1, i64},
        {2, {list, i64}},
        {3, {list, i64}}
    ]};
struct_info('boundingBox') ->
    {struct, [
        {1, double},
        {2, double},
        {3, double},
        {4, double},
        {5, double},
        {6, double},
        {7, double},
        {8, double}
    ]};
struct_info('geospatialStatistics') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'boundingBox'}}},
        {2, {list, i32}}
    ]};
struct_info('statistics') ->
    {struct, [
        {1, string},
        {2, string},
        {3, i64},
        {4, i64},
        {5, string},
        {6, string},
        {7, bool},
        {8, bool}
    ]};
struct_info('stringType') ->
    {struct, []};
struct_info('uUIDType') ->
    {struct, []};
struct_info('mapType') ->
    {struct, []};
struct_info('listType') ->
    {struct, []};
struct_info('enumType') ->
    {struct, []};
struct_info('dateType') ->
    {struct, []};
struct_info('float16Type') ->
    {struct, []};
struct_info('nullType') ->
    {struct, []};
struct_info('decimalType') ->
    {struct, [
        {1, i32},
        {2, i32}
    ]};
struct_info('milliSeconds') ->
    {struct, []};
struct_info('microSeconds') ->
    {struct, []};
struct_info('nanoSeconds') ->
    {struct, []};
struct_info('timeUnit') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'milliSeconds'}}},
        {2, {struct, {'parquer_parquet_types', 'microSeconds'}}},
        {3, {struct, {'parquer_parquet_types', 'nanoSeconds'}}}
    ]};
struct_info('timestampType') ->
    {struct, [
        {1, bool},
        {2, {struct, {'parquer_parquet_types', 'timeUnit'}}}
    ]};
struct_info('timeType') ->
    {struct, [
        {1, bool},
        {2, {struct, {'parquer_parquet_types', 'timeUnit'}}}
    ]};
struct_info('intType') ->
    {struct, [
        {1, byte},
        {2, bool}
    ]};
struct_info('jsonType') ->
    {struct, []};
struct_info('bsonType') ->
    {struct, []};
struct_info('variantType') ->
    {struct, [{1, byte}]};
struct_info('geometryType') ->
    {struct, [{1, string}]};
struct_info('geographyType') ->
    {struct, [
        {1, string},
        {2, i32}
    ]};
struct_info('logicalType') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'stringType'}}},
        {2, {struct, {'parquer_parquet_types', 'mapType'}}},
        {3, {struct, {'parquer_parquet_types', 'listType'}}},
        {4, {struct, {'parquer_parquet_types', 'enumType'}}},
        {5, {struct, {'parquer_parquet_types', 'decimalType'}}},
        {6, {struct, {'parquer_parquet_types', 'dateType'}}},
        {7, {struct, {'parquer_parquet_types', 'timeType'}}},
        {8, {struct, {'parquer_parquet_types', 'timestampType'}}},
        {10, {struct, {'parquer_parquet_types', 'intType'}}},
        {11, {struct, {'parquer_parquet_types', 'nullType'}}},
        {12, {struct, {'parquer_parquet_types', 'jsonType'}}},
        {13, {struct, {'parquer_parquet_types', 'bsonType'}}},
        {14, {struct, {'parquer_parquet_types', 'uUIDType'}}},
        {15, {struct, {'parquer_parquet_types', 'float16Type'}}},
        {16, {struct, {'parquer_parquet_types', 'variantType'}}},
        {17, {struct, {'parquer_parquet_types', 'geometryType'}}},
        {18, {struct, {'parquer_parquet_types', 'geographyType'}}}
    ]};
struct_info('schemaElement') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, i32},
        {4, string},
        {5, i32},
        {6, i32},
        {7, i32},
        {8, i32},
        {9, i32},
        {10, {struct, {'parquer_parquet_types', 'logicalType'}}}
    ]};
struct_info('dataPageHeader') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, i32},
        {4, i32},
        {5, {struct, {'parquer_parquet_types', 'statistics'}}}
    ]};
struct_info('indexPageHeader') ->
    {struct, []};
struct_info('dictionaryPageHeader') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, bool}
    ]};
struct_info('dataPageHeaderV2') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, i32},
        {4, i32},
        {5, i32},
        {6, i32},
        {7, bool},
        {8, {struct, {'parquer_parquet_types', 'statistics'}}}
    ]};
struct_info('splitBlockAlgorithm') ->
    {struct, []};
struct_info('bloomFilterAlgorithm') ->
    {struct, [{1, {struct, {'parquer_parquet_types', 'splitBlockAlgorithm'}}}]};
struct_info('xxHash') ->
    {struct, []};
struct_info('bloomFilterHash') ->
    {struct, [{1, {struct, {'parquer_parquet_types', 'xxHash'}}}]};
struct_info('uncompressed') ->
    {struct, []};
struct_info('bloomFilterCompression') ->
    {struct, [{1, {struct, {'parquer_parquet_types', 'uncompressed'}}}]};
struct_info('bloomFilterHeader') ->
    {struct, [
        {1, i32},
        {2, {struct, {'parquer_parquet_types', 'bloomFilterAlgorithm'}}},
        {3, {struct, {'parquer_parquet_types', 'bloomFilterHash'}}},
        {4, {struct, {'parquer_parquet_types', 'bloomFilterCompression'}}}
    ]};
struct_info('pageHeader') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, i32},
        {4, i32},
        {5, {struct, {'parquer_parquet_types', 'dataPageHeader'}}},
        {6, {struct, {'parquer_parquet_types', 'indexPageHeader'}}},
        {7, {struct, {'parquer_parquet_types', 'dictionaryPageHeader'}}},
        {8, {struct, {'parquer_parquet_types', 'dataPageHeaderV2'}}}
    ]};
struct_info('keyValue') ->
    {struct, [
        {1, string},
        {2, string}
    ]};
struct_info('sortingColumn') ->
    {struct, [
        {1, i32},
        {2, bool},
        {3, bool}
    ]};
struct_info('pageEncodingStats') ->
    {struct, [
        {1, i32},
        {2, i32},
        {3, i32}
    ]};
struct_info('columnMetaData') ->
    {struct, [
        {1, i32},
        {2, {list, i32}},
        {3, {list, string}},
        {4, i32},
        {5, i64},
        {6, i64},
        {7, i64},
        {8, {list, {struct, {'parquer_parquet_types', 'keyValue'}}}},
        {9, i64},
        {10, i64},
        {11, i64},
        {12, {struct, {'parquer_parquet_types', 'statistics'}}},
        {13, {list, {struct, {'parquer_parquet_types', 'pageEncodingStats'}}}},
        {14, i64},
        {15, i32},
        {16, {struct, {'parquer_parquet_types', 'sizeStatistics'}}},
        {17, {struct, {'parquer_parquet_types', 'geospatialStatistics'}}}
    ]};
struct_info('encryptionWithFooterKey') ->
    {struct, []};
struct_info('encryptionWithColumnKey') ->
    {struct, [
        {1, {list, string}},
        {2, string}
    ]};
struct_info('columnCryptoMetaData') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'encryptionWithFooterKey'}}},
        {2, {struct, {'parquer_parquet_types', 'encryptionWithColumnKey'}}}
    ]};
struct_info('columnChunk') ->
    {struct, [
        {1, string},
        {2, i64},
        {3, {struct, {'parquer_parquet_types', 'columnMetaData'}}},
        {4, i64},
        {5, i32},
        {6, i64},
        {7, i32},
        {8, {struct, {'parquer_parquet_types', 'columnCryptoMetaData'}}},
        {9, string}
    ]};
struct_info('rowGroup') ->
    {struct, [
        {1, {list, {struct, {'parquer_parquet_types', 'columnChunk'}}}},
        {2, i64},
        {3, i64},
        {4, {list, {struct, {'parquer_parquet_types', 'sortingColumn'}}}},
        {5, i64},
        {6, i64},
        {7, i16}
    ]};
struct_info('typeDefinedOrder') ->
    {struct, []};
struct_info('columnOrder') ->
    {struct, [{1, {struct, {'parquer_parquet_types', 'typeDefinedOrder'}}}]};
struct_info('pageLocation') ->
    {struct, [
        {1, i64},
        {2, i32},
        {3, i64}
    ]};
struct_info('offsetIndex') ->
    {struct, [
        {1, {list, {struct, {'parquer_parquet_types', 'pageLocation'}}}},
        {2, {list, i64}}
    ]};
struct_info('columnIndex') ->
    {struct, [
        {1, {list, bool}},
        {2, {list, string}},
        {3, {list, string}},
        {4, i32},
        {5, {list, i64}},
        {6, {list, i64}},
        {7, {list, i64}}
    ]};
struct_info('aesGcmV1') ->
    {struct, [
        {1, string},
        {2, string},
        {3, bool}
    ]};
struct_info('aesGcmCtrV1') ->
    {struct, [
        {1, string},
        {2, string},
        {3, bool}
    ]};
struct_info('encryptionAlgorithm') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'aesGcmV1'}}},
        {2, {struct, {'parquer_parquet_types', 'aesGcmCtrV1'}}}
    ]};
struct_info('fileMetaData') ->
    {struct, [
        {1, i32},
        {2, {list, {struct, {'parquer_parquet_types', 'schemaElement'}}}},
        {3, i64},
        {4, {list, {struct, {'parquer_parquet_types', 'rowGroup'}}}},
        {5, {list, {struct, {'parquer_parquet_types', 'keyValue'}}}},
        {6, string},
        {7, {list, {struct, {'parquer_parquet_types', 'columnOrder'}}}},
        {8, {struct, {'parquer_parquet_types', 'encryptionAlgorithm'}}},
        {9, string}
    ]};
struct_info('fileCryptoMetaData') ->
    {struct, [
        {1, {struct, {'parquer_parquet_types', 'encryptionAlgorithm'}}},
        {2, string}
    ]};
struct_info(_) ->
    erlang:error(function_clause).

struct_info_ext('sizeStatistics') ->
    {struct, [
        {1, optional, i64, 'unencoded_byte_array_data_bytes', undefined},
        {2, optional, {list, i64}, 'repetition_level_histogram', []},
        {3, optional, {list, i64}, 'definition_level_histogram', []}
    ]};
struct_info_ext('boundingBox') ->
    {struct, [
        {1, required, double, 'xmin', undefined},
        {2, required, double, 'xmax', undefined},
        {3, required, double, 'ymin', undefined},
        {4, required, double, 'ymax', undefined},
        {5, optional, double, 'zmin', undefined},
        {6, optional, double, 'zmax', undefined},
        {7, optional, double, 'mmin', undefined},
        {8, optional, double, 'mmax', undefined}
    ]};
struct_info_ext('geospatialStatistics') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'boundingBox'}}, 'bbox', #'boundingBox'{}},
        {2, optional, {list, i32}, 'geospatial_types', []}
    ]};
struct_info_ext('statistics') ->
    {struct, [
        {1, optional, string, 'max', undefined},
        {2, optional, string, 'min', undefined},
        {3, optional, i64, 'null_count', undefined},
        {4, optional, i64, 'distinct_count', undefined},
        {5, optional, string, 'max_value', undefined},
        {6, optional, string, 'min_value', undefined},
        {7, optional, bool, 'is_max_value_exact', undefined},
        {8, optional, bool, 'is_min_value_exact', undefined}
    ]};
struct_info_ext('stringType') ->
    {struct, []};
struct_info_ext('uUIDType') ->
    {struct, []};
struct_info_ext('mapType') ->
    {struct, []};
struct_info_ext('listType') ->
    {struct, []};
struct_info_ext('enumType') ->
    {struct, []};
struct_info_ext('dateType') ->
    {struct, []};
struct_info_ext('float16Type') ->
    {struct, []};
struct_info_ext('nullType') ->
    {struct, []};
struct_info_ext('decimalType') ->
    {struct, [
        {1, required, i32, 'scale', undefined},
        {2, required, i32, 'precision', undefined}
    ]};
struct_info_ext('milliSeconds') ->
    {struct, []};
struct_info_ext('microSeconds') ->
    {struct, []};
struct_info_ext('nanoSeconds') ->
    {struct, []};
struct_info_ext('timeUnit') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'milliSeconds'}}, 'mILLIS',
            #'milliSeconds'{}},
        {2, optional, {struct, {'parquer_parquet_types', 'microSeconds'}}, 'mICROS',
            #'microSeconds'{}},
        {3, optional, {struct, {'parquer_parquet_types', 'nanoSeconds'}}, 'nANOS', #'nanoSeconds'{}}
    ]};
struct_info_ext('timestampType') ->
    {struct, [
        {1, required, bool, 'isAdjustedToUTC', undefined},
        {2, required, {struct, {'parquer_parquet_types', 'timeUnit'}}, 'unit', #'timeUnit'{}}
    ]};
struct_info_ext('timeType') ->
    {struct, [
        {1, required, bool, 'isAdjustedToUTC', undefined},
        {2, required, {struct, {'parquer_parquet_types', 'timeUnit'}}, 'unit', #'timeUnit'{}}
    ]};
struct_info_ext('intType') ->
    {struct, [
        {1, required, byte, 'bitWidth', undefined},
        {2, required, bool, 'isSigned', undefined}
    ]};
struct_info_ext('jsonType') ->
    {struct, []};
struct_info_ext('bsonType') ->
    {struct, []};
struct_info_ext('variantType') ->
    {struct, [{1, optional, byte, 'specification_version', undefined}]};
struct_info_ext('geometryType') ->
    {struct, [{1, optional, string, 'crs', undefined}]};
struct_info_ext('geographyType') ->
    {struct, [
        {1, optional, string, 'crs', undefined},
        {2, optional, i32, 'algorithm', undefined}
    ]};
struct_info_ext('logicalType') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'stringType'}}, 'sTRING', #'stringType'{}},
        {2, optional, {struct, {'parquer_parquet_types', 'mapType'}}, 'mAP', #'mapType'{}},
        {3, optional, {struct, {'parquer_parquet_types', 'listType'}}, 'lIST', #'listType'{}},
        {4, optional, {struct, {'parquer_parquet_types', 'enumType'}}, 'eNUM', #'enumType'{}},
        {5, optional, {struct, {'parquer_parquet_types', 'decimalType'}}, 'dECIMAL',
            #'decimalType'{}},
        {6, optional, {struct, {'parquer_parquet_types', 'dateType'}}, 'dATE', #'dateType'{}},
        {7, optional, {struct, {'parquer_parquet_types', 'timeType'}}, 'tIME', #'timeType'{}},
        {8, optional, {struct, {'parquer_parquet_types', 'timestampType'}}, 'tIMESTAMP',
            #'timestampType'{}},
        {10, optional, {struct, {'parquer_parquet_types', 'intType'}}, 'iNTEGER', #'intType'{}},
        {11, optional, {struct, {'parquer_parquet_types', 'nullType'}}, 'uNKNOWN', #'nullType'{}},
        {12, optional, {struct, {'parquer_parquet_types', 'jsonType'}}, 'jSON', #'jsonType'{}},
        {13, optional, {struct, {'parquer_parquet_types', 'bsonType'}}, 'bSON', #'bsonType'{}},
        {14, optional, {struct, {'parquer_parquet_types', 'uUIDType'}}, 'uUID', #'uUIDType'{}},
        {15, optional, {struct, {'parquer_parquet_types', 'float16Type'}}, 'fLOAT16',
            #'float16Type'{}},
        {16, optional, {struct, {'parquer_parquet_types', 'variantType'}}, 'vARIANT',
            #'variantType'{}},
        {17, optional, {struct, {'parquer_parquet_types', 'geometryType'}}, 'gEOMETRY',
            #'geometryType'{}},
        {18, optional, {struct, {'parquer_parquet_types', 'geographyType'}}, 'gEOGRAPHY',
            #'geographyType'{}}
    ]};
struct_info_ext('schemaElement') ->
    {struct, [
        {1, optional, i32, 'type', undefined},
        {2, optional, i32, 'type_length', undefined},
        {3, optional, i32, 'repetition_type', undefined},
        {4, required, string, 'name', undefined},
        {5, optional, i32, 'num_children', undefined},
        {6, optional, i32, 'converted_type', undefined},
        {7, optional, i32, 'scale', undefined},
        {8, optional, i32, 'precision', undefined},
        {9, optional, i32, 'field_id', undefined},
        {10, optional, {struct, {'parquer_parquet_types', 'logicalType'}}, 'logicalType',
            #'logicalType'{}}
    ]};
struct_info_ext('dataPageHeader') ->
    {struct, [
        {1, required, i32, 'num_values', undefined},
        {2, required, i32, 'encoding', undefined},
        {3, required, i32, 'definition_level_encoding', undefined},
        {4, required, i32, 'repetition_level_encoding', undefined},
        {5, optional, {struct, {'parquer_parquet_types', 'statistics'}}, 'statistics',
            #'statistics'{}}
    ]};
struct_info_ext('indexPageHeader') ->
    {struct, []};
struct_info_ext('dictionaryPageHeader') ->
    {struct, [
        {1, required, i32, 'num_values', undefined},
        {2, required, i32, 'encoding', undefined},
        {3, optional, bool, 'is_sorted', undefined}
    ]};
struct_info_ext('dataPageHeaderV2') ->
    {struct, [
        {1, required, i32, 'num_values', undefined},
        {2, required, i32, 'num_nulls', undefined},
        {3, required, i32, 'num_rows', undefined},
        {4, required, i32, 'encoding', undefined},
        {5, required, i32, 'definition_levels_byte_length', undefined},
        {6, required, i32, 'repetition_levels_byte_length', undefined},
        {7, optional, bool, 'is_compressed', true},
        {8, optional, {struct, {'parquer_parquet_types', 'statistics'}}, 'statistics',
            #'statistics'{}}
    ]};
struct_info_ext('splitBlockAlgorithm') ->
    {struct, []};
struct_info_ext('bloomFilterAlgorithm') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'splitBlockAlgorithm'}}, 'bLOCK',
            #'splitBlockAlgorithm'{}}
    ]};
struct_info_ext('xxHash') ->
    {struct, []};
struct_info_ext('bloomFilterHash') ->
    {struct, [{1, optional, {struct, {'parquer_parquet_types', 'xxHash'}}, 'xXHASH', #'xxHash'{}}]};
struct_info_ext('uncompressed') ->
    {struct, []};
struct_info_ext('bloomFilterCompression') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'uncompressed'}}, 'uNCOMPRESSED',
            #'uncompressed'{}}
    ]};
struct_info_ext('bloomFilterHeader') ->
    {struct, [
        {1, required, i32, 'numBytes', undefined},
        {2, required, {struct, {'parquer_parquet_types', 'bloomFilterAlgorithm'}}, 'algorithm',
            #'bloomFilterAlgorithm'{}},
        {3, required, {struct, {'parquer_parquet_types', 'bloomFilterHash'}}, 'hash',
            #'bloomFilterHash'{}},
        {4, required, {struct, {'parquer_parquet_types', 'bloomFilterCompression'}}, 'compression',
            #'bloomFilterCompression'{}}
    ]};
struct_info_ext('pageHeader') ->
    {struct, [
        {1, required, i32, 'type', undefined},
        {2, required, i32, 'uncompressed_page_size', undefined},
        {3, required, i32, 'compressed_page_size', undefined},
        {4, optional, i32, 'crc', undefined},
        {5, optional, {struct, {'parquer_parquet_types', 'dataPageHeader'}}, 'data_page_header',
            #'dataPageHeader'{}},
        {6, optional, {struct, {'parquer_parquet_types', 'indexPageHeader'}}, 'index_page_header',
            #'indexPageHeader'{}},
        {7, optional, {struct, {'parquer_parquet_types', 'dictionaryPageHeader'}},
            'dictionary_page_header', #'dictionaryPageHeader'{}},
        {8, optional, {struct, {'parquer_parquet_types', 'dataPageHeaderV2'}},
            'data_page_header_v2', #'dataPageHeaderV2'{}}
    ]};
struct_info_ext('keyValue') ->
    {struct, [
        {1, required, string, 'key', undefined},
        {2, optional, string, 'value', undefined}
    ]};
struct_info_ext('sortingColumn') ->
    {struct, [
        {1, required, i32, 'column_idx', undefined},
        {2, required, bool, 'descending', undefined},
        {3, required, bool, 'nulls_first', undefined}
    ]};
struct_info_ext('pageEncodingStats') ->
    {struct, [
        {1, required, i32, 'page_type', undefined},
        {2, required, i32, 'encoding', undefined},
        {3, required, i32, 'count', undefined}
    ]};
struct_info_ext('columnMetaData') ->
    {struct, [
        {1, required, i32, 'type', undefined},
        {2, required, {list, i32}, 'encodings', []},
        {3, required, {list, string}, 'path_in_schema', []},
        {4, required, i32, 'codec', undefined},
        {5, required, i64, 'num_values', undefined},
        {6, required, i64, 'total_uncompressed_size', undefined},
        {7, required, i64, 'total_compressed_size', undefined},
        {8, optional, {list, {struct, {'parquer_parquet_types', 'keyValue'}}}, 'key_value_metadata',
            []},
        {9, required, i64, 'data_page_offset', undefined},
        {10, optional, i64, 'index_page_offset', undefined},
        {11, optional, i64, 'dictionary_page_offset', undefined},
        {12, optional, {struct, {'parquer_parquet_types', 'statistics'}}, 'statistics',
            #'statistics'{}},
        {13, optional, {list, {struct, {'parquer_parquet_types', 'pageEncodingStats'}}},
            'encoding_stats', []},
        {14, optional, i64, 'bloom_filter_offset', undefined},
        {15, optional, i32, 'bloom_filter_length', undefined},
        {16, optional, {struct, {'parquer_parquet_types', 'sizeStatistics'}}, 'size_statistics',
            #'sizeStatistics'{}},
        {17, optional, {struct, {'parquer_parquet_types', 'geospatialStatistics'}},
            'geospatial_statistics', #'geospatialStatistics'{}}
    ]};
struct_info_ext('encryptionWithFooterKey') ->
    {struct, []};
struct_info_ext('encryptionWithColumnKey') ->
    {struct, [
        {1, required, {list, string}, 'path_in_schema', []},
        {2, optional, string, 'key_metadata', undefined}
    ]};
struct_info_ext('columnCryptoMetaData') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'encryptionWithFooterKey'}},
            'eNCRYPTION_WITH_FOOTER_KEY', #'encryptionWithFooterKey'{}},
        {2, optional, {struct, {'parquer_parquet_types', 'encryptionWithColumnKey'}},
            'eNCRYPTION_WITH_COLUMN_KEY', #'encryptionWithColumnKey'{}}
    ]};
struct_info_ext('columnChunk') ->
    {struct, [
        {1, optional, string, 'file_path', undefined},
        {2, required, i64, 'file_offset', 0},
        {3, optional, {struct, {'parquer_parquet_types', 'columnMetaData'}}, 'meta_data',
            #'columnMetaData'{}},
        {4, optional, i64, 'offset_index_offset', undefined},
        {5, optional, i32, 'offset_index_length', undefined},
        {6, optional, i64, 'column_index_offset', undefined},
        {7, optional, i32, 'column_index_length', undefined},
        {8, optional, {struct, {'parquer_parquet_types', 'columnCryptoMetaData'}},
            'crypto_metadata', #'columnCryptoMetaData'{}},
        {9, optional, string, 'encrypted_column_metadata', undefined}
    ]};
struct_info_ext('rowGroup') ->
    {struct, [
        {1, required, {list, {struct, {'parquer_parquet_types', 'columnChunk'}}}, 'columns', []},
        {2, required, i64, 'total_byte_size', undefined},
        {3, required, i64, 'num_rows', undefined},
        {4, optional, {list, {struct, {'parquer_parquet_types', 'sortingColumn'}}},
            'sorting_columns', []},
        {5, optional, i64, 'file_offset', undefined},
        {6, optional, i64, 'total_compressed_size', undefined},
        {7, optional, i16, 'ordinal', undefined}
    ]};
struct_info_ext('typeDefinedOrder') ->
    {struct, []};
struct_info_ext('columnOrder') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'typeDefinedOrder'}}, 'tYPE_ORDER',
            #'typeDefinedOrder'{}}
    ]};
struct_info_ext('pageLocation') ->
    {struct, [
        {1, required, i64, 'offset', undefined},
        {2, required, i32, 'compressed_page_size', undefined},
        {3, required, i64, 'first_row_index', undefined}
    ]};
struct_info_ext('offsetIndex') ->
    {struct, [
        {1, required, {list, {struct, {'parquer_parquet_types', 'pageLocation'}}}, 'page_locations',
            []},
        {2, optional, {list, i64}, 'unencoded_byte_array_data_bytes', []}
    ]};
struct_info_ext('columnIndex') ->
    {struct, [
        {1, required, {list, bool}, 'null_pages', []},
        {2, required, {list, string}, 'min_values', []},
        {3, required, {list, string}, 'max_values', []},
        {4, required, i32, 'boundary_order', undefined},
        {5, optional, {list, i64}, 'null_counts', []},
        {6, optional, {list, i64}, 'repetition_level_histograms', []},
        {7, optional, {list, i64}, 'definition_level_histograms', []}
    ]};
struct_info_ext('aesGcmV1') ->
    {struct, [
        {1, optional, string, 'aad_prefix', undefined},
        {2, optional, string, 'aad_file_unique', undefined},
        {3, optional, bool, 'supply_aad_prefix', undefined}
    ]};
struct_info_ext('aesGcmCtrV1') ->
    {struct, [
        {1, optional, string, 'aad_prefix', undefined},
        {2, optional, string, 'aad_file_unique', undefined},
        {3, optional, bool, 'supply_aad_prefix', undefined}
    ]};
struct_info_ext('encryptionAlgorithm') ->
    {struct, [
        {1, optional, {struct, {'parquer_parquet_types', 'aesGcmV1'}}, 'aES_GCM_V1', #'aesGcmV1'{}},
        {2, optional, {struct, {'parquer_parquet_types', 'aesGcmCtrV1'}}, 'aES_GCM_CTR_V1',
            #'aesGcmCtrV1'{}}
    ]};
struct_info_ext('fileMetaData') ->
    {struct, [
        {1, required, i32, 'version', undefined},
        {2, required, {list, {struct, {'parquer_parquet_types', 'schemaElement'}}}, 'schema', []},
        {3, required, i64, 'num_rows', undefined},
        {4, required, {list, {struct, {'parquer_parquet_types', 'rowGroup'}}}, 'row_groups', []},
        {5, optional, {list, {struct, {'parquer_parquet_types', 'keyValue'}}}, 'key_value_metadata',
            []},
        {6, optional, string, 'created_by', undefined},
        {7, optional, {list, {struct, {'parquer_parquet_types', 'columnOrder'}}}, 'column_orders',
            []},
        {8, optional, {struct, {'parquer_parquet_types', 'encryptionAlgorithm'}},
            'encryption_algorithm', #'encryptionAlgorithm'{}},
        {9, optional, string, 'footer_signing_key_metadata', undefined}
    ]};
struct_info_ext('fileCryptoMetaData') ->
    {struct, [
        {1, required, {struct, {'parquer_parquet_types', 'encryptionAlgorithm'}},
            'encryption_algorithm', #'encryptionAlgorithm'{}},
        {2, optional, string, 'key_metadata', undefined}
    ]};
struct_info_ext(_) ->
    erlang:error(function_clause).

struct_names() ->
    [
        'sizeStatistics',
        'boundingBox',
        'geospatialStatistics',
        'statistics',
        'stringType',
        'uUIDType',
        'mapType',
        'listType',
        'enumType',
        'dateType',
        'float16Type',
        'nullType',
        'decimalType',
        'milliSeconds',
        'microSeconds',
        'nanoSeconds',
        'timeUnit',
        'timestampType',
        'timeType',
        'intType',
        'jsonType',
        'bsonType',
        'variantType',
        'geometryType',
        'geographyType',
        'logicalType',
        'schemaElement',
        'dataPageHeader',
        'indexPageHeader',
        'dictionaryPageHeader',
        'dataPageHeaderV2',
        'splitBlockAlgorithm',
        'bloomFilterAlgorithm',
        'xxHash',
        'bloomFilterHash',
        'uncompressed',
        'bloomFilterCompression',
        'bloomFilterHeader',
        'pageHeader',
        'keyValue',
        'sortingColumn',
        'pageEncodingStats',
        'columnMetaData',
        'encryptionWithFooterKey',
        'encryptionWithColumnKey',
        'columnCryptoMetaData',
        'columnChunk',
        'rowGroup',
        'typeDefinedOrder',
        'columnOrder',
        'pageLocation',
        'offsetIndex',
        'columnIndex',
        'aesGcmV1',
        'aesGcmCtrV1',
        'encryptionAlgorithm',
        'fileMetaData',
        'fileCryptoMetaData'
    ].

enum_info('type') ->
    [
        {'bOOLEAN', 0},
        {'iNT32', 1},
        {'iNT64', 2},
        {'iNT96', 3},
        {'fLOAT', 4},
        {'dOUBLE', 5},
        {'bYTE_ARRAY', 6},
        {'fIXED_LEN_BYTE_ARRAY', 7}
    ];
enum_info('convertedType') ->
    [
        {'uTF8', 0},
        {'mAP', 1},
        {'mAP_KEY_VALUE', 2},
        {'lIST', 3},
        {'eNUM', 4},
        {'dECIMAL', 5},
        {'dATE', 6},
        {'tIME_MILLIS', 7},
        {'tIME_MICROS', 8},
        {'tIMESTAMP_MILLIS', 9},
        {'tIMESTAMP_MICROS', 10},
        {'uINT_8', 11},
        {'uINT_16', 12},
        {'uINT_32', 13},
        {'uINT_64', 14},
        {'iNT_8', 15},
        {'iNT_16', 16},
        {'iNT_32', 17},
        {'iNT_64', 18},
        {'jSON', 19},
        {'bSON', 20},
        {'iNTERVAL', 21}
    ];
enum_info('fieldRepetitionType') ->
    [
        {'rEQUIRED', 0},
        {'oPTIONAL', 1},
        {'rEPEATED', 2}
    ];
enum_info('edgeInterpolationAlgorithm') ->
    [
        {'sPHERICAL', 0},
        {'vINCENTY', 1},
        {'tHOMAS', 2},
        {'aNDOYER', 3},
        {'kARNEY', 4}
    ];
enum_info('encoding') ->
    [
        {'pLAIN', 0},
        {'pLAIN_DICTIONARY', 2},
        {'rLE', 3},
        {'bIT_PACKED', 4},
        {'dELTA_BINARY_PACKED', 5},
        {'dELTA_LENGTH_BYTE_ARRAY', 6},
        {'dELTA_BYTE_ARRAY', 7},
        {'rLE_DICTIONARY', 8},
        {'bYTE_STREAM_SPLIT', 9}
    ];
enum_info('compressionCodec') ->
    [
        {'uNCOMPRESSED', 0},
        {'sNAPPY', 1},
        {'gZIP', 2},
        {'lZO', 3},
        {'bROTLI', 4},
        {'lZ4', 5},
        {'zSTD', 6},
        {'lZ4_RAW', 7}
    ];
enum_info('pageType') ->
    [
        {'dATA_PAGE', 0},
        {'iNDEX_PAGE', 1},
        {'dICTIONARY_PAGE', 2},
        {'dATA_PAGE_V2', 3}
    ];
enum_info('boundaryOrder') ->
    [
        {'uNORDERED', 0},
        {'aSCENDING', 1},
        {'dESCENDING', 2}
    ];
enum_info(_) ->
    erlang:error(function_clause).

enum_names() ->
    [
        'type',
        'convertedType',
        'fieldRepetitionType',
        'edgeInterpolationAlgorithm',
        'encoding',
        'compressionCodec',
        'pageType',
        'boundaryOrder'
    ].

exception_names() ->
    [].

-dialyzer(no_improper_lists).
-dialyzer({nowarn_function, struct_info_ext/1}).
